plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'org.jetbrains.kotlinx.kover' version '0.7.3'
    id 'org.jlleitschuh.gradle.ktlint' version '11.5.0'
    id 'org.jetbrains.kotlin.kapt' version '1.9.0'
}

group = 'com.justsend'
version = '0.1.0-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-reactor:1.7.3"
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'com.google.firebase:firebase-admin:9.4.3'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'net.datafaker:datafaker:2.4.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    kapt 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'com.h2database:h2'

    testImplementation "io.mockk:mockk:1.13.10"
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}


kapt {
    correctErrorTypes = true
}

tasks.named('test') {
	useJUnitPlatform()
}

kover {
    useJacoco()
}

koverReport {
    verify {
        rule {
            bound {
                minValue = 80
            }
        }
        filters {
            excludes {
                classes("JustsendApiApplicationKt")
                classes("JustSendApiApplication")
                packages("config")
                packages("controller")
                packages("mappers")
                packages("dto")
                packages("external")
                packages("repository")
                packages("security")
                packages("service")
            }
        }
    }

    defaults {
        html {
            onCheck = true
        }
    }
}


ktlint {
    disabledRules = ['no-wildcard-imports', 'max-line-length']
}

tasks.register('installGitHook', Copy) {
    def hookFile = file("hooks/pre-commit")
    def gitHookFile = file(".git/hooks/pre-commit")

    from(hookFile)
    into(".git/hooks")
    rename { "pre-commit" }

    doLast {
        gitHookFile.setExecutable(true)
        println "âœ… Installed pre-commit hook to .git/hooks/"
    }
}

